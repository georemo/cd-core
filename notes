- create a cd module that facilitates entry points for module/controller/action(data)
    - cd-sys modules should be accessible via 
      - "cd/sys/base"
      - "cd/sys/user"
      - "cd/sys/moduleman"
      - "cd/sys/comm"
      - "cd/sys/scheduler"
    - cd-app modules should be accessible via 
      - "cd/app/xxx"
- create a cobra base that can consume cd moodule with cli pattern of cd -m=os -c=userman -a=adduser -d='{"username":"jdoe"}'
    - the outpush should be data that can be converted to standard cd json response
- create an golang http api that accepts generic cd json input of 
    - the outpush should be standard cd json response
- create a golang http api that can accept standard rest api and repond in standard rest api expectations



Publish is used by developers to register module
  - get the latest tag:
  - git ls-remote --tags https://github.com/tcp-x/cd-core.git
  - tag and push plugin project:
  - go mod tidy
    git add <go-filenam>
    git commit -m "set version v0.0.1"
    git tag v0.0.1
    git push origin v0.0.1
  - get the latest tag to confirm update at github:
  - git ls-remote --tags https://github.com/tcp-x/cd-core.git
  - module name
  - Standards:
  - auto test
  - req test designed by corpdesk team
  - version

Updating submodules:
- Ref: https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/How-to-update-Git-submodules
    git submodule update --remote
    git add .
    git commit -m "git submodule updated"
    git push origin


core features:
- authentication
- authorization
- db connection
- cd-obj
- cd-modeman
- cd-user
- cd-comm
- cd-scheduler